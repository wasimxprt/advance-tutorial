***** JavaScript *****
1. Design patterns in JavaScript
2. Slice and Splice methods in JavaScript
3. Merge two arrays
4. Typescript basics
5. Closures and its uses
6. Program to reverse string, program to find if the string is anagram
7. HTTP1/HTTP2
8. Event bubbling and event capturing

1. Rxjs library and its usage in Angular
3. CSS floats and grid system
7. CSS reflow
8. Reconciliation in React
9. Shadow dom in Angular
10. Virtual DOM in React
11. Positions in CSS
12. Specificity in CSS
13. CSS combinators
14. getDerivedstate form props
15. Access DOM elements in angular
16. Fragments in react
17. Pure components in React
18. Diff between service and factory
19. Event loop
20. v8 engine
21. Asynch and non blocking
22. Multithreading in nodejs
23. psedo elements and pseudo classed in CSS
24. shouldComponent update in React
25. box-sizing in CSS
26. Code splitting in React
27. Shallow rendering in react
28. Error Boundaries example in React
29. Error first in node.js
30. setState and replaceState in React
31. AV testing
32. Security aspects in Front end
33. CSS positions
34. Flexbox in detail
35. Promises in detail and difference between promise and observable
36. Remove duplicate values from array in JavaScript
37. map function paramaters
38. useMemo vs useCallback in React
39. Remove duplicate values from array
40. Controlled and Uncontrolled components in React
41. Pure components in React
42. Content security policy (CSP)
43. HOC component example with login component
44. Life cycle methods in react
45. Redux architecture and use of connect function
46. useEffect with componentDidMount, componentWillUnmount, componentDidUpdate example
47. Explain componentWillUnmount with example
48. Const Root = () => {
    const update = (type) => {
	console.log(type)
}return <Parent update={update} />
}

Const Parent = ({update}) => {useEffect(() => {
update(‘parent’)

},[])return <Child update={update} />}

Const Child = () => {useEffect(() => {
update(‘child’)

},[])return <div></div>}

49. useeffect with async await
50. Lazy loading in React
51. Suspense in React
51. Fragments and Portal in React
52. Difference between npm and yarn

***** Database *****
53. Difference between MySQL and MongoDB
54. In MySQL storage engines
55. Difference between MyISAM and InnoDB
56. Full text search in MySQL
57. What are indexes and purpose of it
58. Type of indexes in MySQL
59. Stored procedures in MySQL
60. Funtions in MySQL
61. group_concat in MySQL
62. Triggers in MySQL
63. How to take backup of MySQL database
64. Database replication in MySQL
65. What kind of indexes are available in MongoDB
66. Join like queries in MongoDB
67. Different joins in MySQL with example
68. Can we create an index on array field in MongoDB
69. MongoDB query example
70. Aggregation in MongoDB
71. Logs in MongoDB
72. Get query which is time consuming in logs
73. Records in paging format in Mysql and paramaters in LIMIT
74. Partition mechanism in MySQL
75. MariaDB --- diff between mysql and maridb
76. Normalization in database and its benefits


***** React *****
1. Virtual DOM exaplanation
2. JSX in React
3. Difference between elements and components
4. When to use class components and when to use functional component
5. Difference between state and props
6. How to bind methods/events in component
7. Inline conditional expression
8. Refs in React and forward refs
9. What is shadow DOM and how it is different from virtual DOM
10. What is React fibre
11. What are controller and uncontrolled components
12. HOC components
13. Why we use className in React
14. Decorators in React
15. How to enable production mode in react
16. setState is called 5 times on button click, how many times the component will be rerendered.
17. Redux architecture
18. Middleware in redux - redux-thunk or redux-saga

***** Cloud/Deployment *****
1. What are the services used in AWS
2. How to deploy full stack on AWS infra
3. Docker and how to deploy FE app through docker
4. How container is designed for FE and BE app
5. Benefits of using pm2 and how to deploy a node based application


***** Programs *****
1. Merge two string arrays remove duplicate and sort

***** API/Web Services *****
1. Difference between PUT and POST
2. PATCH example

*****  *****
1. Deploy React/Nodejs application on production
2. Performance and security measures for front end application
3. Eslint in react application
4. AWS services used
5. Experience of designing hybrid GUI for the applications (Desktop based and Mobile based applications). This will be a plus
Good to have knowledge of data marshalling/de-marshalling using JSON and XML


1. OAuth specifications
2. Difference between sharding and replication in MongoDB
3. CORS issue in angular application
4. What are microservies
5. Difference between monolithic and microservices


1. How to chain promises
2. How to remove duplicate values from an array
3. Reverse a string
4. How to write IE specific css
5. Advantages of SCSS
6. HTML5 new features
7. Mobile first approach
8. javascript defer async
9. How to chain promises
10. Pass a common header for each and every http request in react
11. Promise.all and Promise.race
12. Why we need to use bind method in react
13. How to use es6 functions not working in IE
14. Test performance of react application
15. await in nodejs
16. diff between asynch await and Promise
17. make this.setState asycn
18. sequence of component lifecycle
19. re-render a component in react
20. why to use redux thunk and how it works
21. lifecycle of redux
22.pass data from child to parent in react


************************************************************ INTERVIEW CONCEPTS *******************************************************************************
*************************** CSS Concepts *****************************
css3 new properties, accessibility, HTML5 semantic tags, scss concepts, grid, flexbox system
1. Positions in CSS
2. pseudo elements and pseudo classed in CSS
3. Flexbox in CSS
4. How to center an element in using flexbox
5. box-sizing in CSS
6. Advantages of SCSS
7. CSS box-model
8. What's the difference between "resetting" and "normalizing" CSS? Which would you choose, and why?
9. What's the difference between inline and inline-block?
10. translate() instead of absolute.

**************************** React Concepts **************************
--props drilling, --diff between state and props, ---React.memo(), ---Why do we need a key property, ---How to prevent components from re-rendering?
Storybook, publishing components

1. Reconciliation in React
2. Virtual DOM in React
3. getDerivedstateFromProps lifecycle method
4. HOC and its use case 
5. What are pure components 
6. Various lifecycle methods in React
7. Ways to define a react component - class based and functional components
8. Why we need to import React from 'react' in functional components
9. Why we use shouldComponentUpdate lifecycle method in React
10. What is Shallow rendering in react
11. Is setState sync or async
12. Error Boundaries example in React
13. Fragments and Portal in React
14. What is JSX in React, does browser understands JSX syntax
15. Difference between state and props
16. When to use class components and when to use functional component
17. Difference between state and props
18. Refs in React and forward refs
19. What is shadow DOM and how it is different from virtual DOM
20. What is React fibre
21. What are controlled and uncontrolled components
22. setState is called 5 times on button click, how many times the component will be re-rendered
23. React hooks and basic hooks available
23. React context API and useEffect hook - how to implement componentWillUnmount in useEffect
24. Can we re-render component without setState


**************************** Redux Concepts **************************
1. Redux architecture
2. Middleware in redux - redux-thunk or redux-saga
3. Redux architecture and use of connect function
4. Why should not we update the state directly
5. What are actions and actionCreators


**************************** JavaScript Concepts **************************
1. Design patterns in JavaScript
2. Slice and Splice methods in JavaScript
3. Event delegation (event bubbling and event capturing)
4. Closures and its uses
5. What is a Promise and how to chain promises
6. What is call, apply, bind
7. Front end securty measures
8. Promise.all and Promise.race
9. What is prototype in JS
10. What is hoisting? Doea hoisting works with const and let
11. What is deep and shallow cloning
12. Difference between const and Object.freeze
13. What is the difference between cookies and local storage


**************************** ES6 Concepts **************************

1. What are the new features introduced in ES6
2. What is the arrow function, and how to create it? Advantages
3. Spread and Rest operator and difference between both.
4. What is destructuring in ES6


